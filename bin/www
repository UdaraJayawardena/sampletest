var app = require('../app');
var debug = require('debug')('sample:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var privateKey = fs.readFileSync('../../openSSL/yourdomain.key', 'utf8');
var certificate = fs.readFileSync('../../openSSL/eb85514f91f9d47f.crt', 'utf8');

var server_config = {
  key: privateKey,
  cert: certificate
}

var https_server = https.createServer(server_config, app).listen(443, function (err) {
  console.log('Run on 443');
});


var http_server = http.createServer(function (req, res) {
  res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
  res.end();
}).listen(80, function () {
  console.log('Run on 80');
})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
